plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.97'
}

apply from: '../common.gradle'

project.ext.mod_id = project.archives_base_name;

// These are defined in ../common.properties
version = project.mod_version
group = project.dev_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

// Mojang ships Java 17 to end users in 1.18+
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
base {
	archivesName = mod_id
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime

	libraries
    	// This will make sure that all dependencies that you add to the libraries configuration will also be added to the implementation configuration
    	// This way, you only need one dependency declaration for both runtime and compile dependencies
	implementation.extendsFrom libraries
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
	configureEach {
		dependencies {
			runtime project.configurations.libraries
		}

		workingDirectory project.file('run')

		// Recommended logging data for a userdev environment
		systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES'

		// Recommended logging level for the console
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		systemProperty 'mixin.debug.verbose', 'true'
		systemProperty 'mixin.debug.export', 'false'
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		programArgument '--nogui'
	}
}

// Include resources generated by data generators.
sourceSets {
	main {
		java {
			srcDir "../src/main/java"
			srcDir "../src/clothconfig/java"
		}
		resources {
			srcDir "../src/main/resources"
			srcDir "src/generated/resources"
			exclude '.cache'
			exclude 'Thumbs.db'
		}
	}
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"

	// Netty's http and websocket support
	libraries(group: 'io.netty', name: 'netty-codec-http', version: project.netty_version) {
		exclude(group: 'io.netty')
	}

	// Pack io.netty:netty-codec-http in the mod jar
	jarJar(group: 'io.netty', name: 'netty-codec-http', version: "[${project.netty_version_min}, ${project.netty_version_max})") {
		jarJar.pin(it, project.netty_version)
		exclude(group: 'io.netty')
	}
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
	version version
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": "Rikka0w0",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor" :"Rikka0w0",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.archiveClassifier = 'neoforge-slim';

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
	mergedProperties.setProperty('mod_id', mod_id)
	mergedProperties.setProperty('minecraft_version_range', minecraft_version_range)
	inputs.properties project.mergedProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand project.mergedProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jarJar.enable()
tasks.jarJar {
    archiveClassifier.set('neoforge')
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
